//---------------------------------------------------------------------------

#include <vcl.h>

#pragma hdrstop

#include "game.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)

#pragma resource "*.dfm"

TForm3 *Form3;

//---------------------------------------------------------------------------

__fastcall TForm3::TForm3(TComponent* Owner)

: TForm(Owner)

{

}

//---------------------------------------------------------------------------

void __fastcall TForm3::Timer1Timer(TObject *Sender)

{

// перемалювати сцену

if(fld->isEmpty())

{

fld->newFigure();

}

fld->Hide(Image2->Canvas);

fld->moveDown();

fld->Show(Image2->Canvas);

}

//---------------------------------------------------------------------------

void __fastcall TForm3::Button1Click(TObject *Sender)

{

// fld->Show(Image2->Canvas);

}

//---------------------------------------------------------------------------

void __fastcall TForm3::Button2Click(TObject *Sender)

{

Timer1->Enabled = false;

}

//---------------------------------------------------------------------------

void __fastcall TForm3::Label4Click(TObject *Sender)

{

Timer1->Enabled = true;

fld = new fieldFigures(Image2->Width / 10, Image2->Height / 20);

}

//---------------------------------------------------------------------------

void __fastcall TForm3::Label5Click(TObject *Sender)

{

Timer1->Enabled = false;

}

//---------------------------------------------------------------------------

void __fastcall TForm3::FormKeyDown(TObject *Sender, WORD &Key,

TShiftState Shift)

{

switch(Key)

{

case 37: fld->Hide(Image2->Canvas);

fld->moveLeft();

fld->Show(Image2->Canvas);

break;

case 39:

fld->Hide(Image2->Canvas);

fld->moveRight(); break;

fld->Show(Image2->Canvas);

}

}

//---------------------------------------------------------------------------

Лістинг А.2 - модуль field.cpp

//---------------------------------------------------------------------------

#pragma hdrstop

#include "field.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)

fieldFigures :: fieldFigures(int w, int h)

{

width = w;

height = h;

empty = true; // знак того, що поле не зайняте

fig = new Figures();

//ініціалізуємо масив поля

for(int i = 0; i < N; i++)

{

for(int j = 0; j < M; j++)

{

matr[i][j] = 0;

}

}

}

void fieldFigures :: moveDown() // блок-схема 1

{

if( !canMove() ) // якщо не можемо опустити фігуру

{

empty = true; // звільняємо поле, а 1 перетворюємо в 2

for(int i = N - 1; i > 0; i--)

{

for(int j = 0; j < M; j++) if(matr[i][j] == 1) matr[i][j] = 2;

}

}

else

{

for(int i = N - 1; i > 0; i--)

{

for(int j = 0; j < M; j++)

if(matr[i - 1][j] == 1)

{

matr[i][j] = matr[i - 1][j];

matr[i - 1][j] = 0;

}

}

}

}

void fieldFigures :: moveLeft() // блок-схема 1

{

if( canMoveLeft() ) // якщо не можемо опустити фігурку

{

for(int i = N - 1; i > 0; i--)

{

for(int j = 0; j < M - 1; j++)

if(matr[i][j+1] == 1)

{

matr[i][j] = matr[i][j+1];

matr[i][j+1] = 0;

}

}

}

}

void fieldFigures :: moveRight() // блок-схема 1

{

if( canMoveRight() ) // якщо не можемо опустити фігурку

{

for(int i = N - 1; i > 0; i--)

{

for(int j = M - 1; j > 0; j--)

if(matr[i][j - 1] == 1)

{

matr[i][j] = matr[i][j - 1];

matr[i][j - 1] = 0;

}

}

}

}

bool fieldFigures :: isLine()

{

return false;

}

int fieldFigures :: isDraw(int i, int j)

{

return matr[i][j] == 0 ? false : true;

}

void fieldFigures::Show(TCanvas *can)

{

can->Pen->Color = clBlack;

for(int i = 0; i < N; i++)

{

for(int j = 0; j < M; j++)

if(isDraw(i, j))

{

can->Rectangle(j * getWidth(), i * getHeight(),

(j + 1) * getWidth(), (i + 1) * getHeight());

}

}

}

void fieldFigures::Hide(TCanvas *can)

{

can->Pen->Color = clWhite;

for(int i = 0; i < N; i++)

{

for(int j = 0; j < M; j++)

if(isDraw(i, j))

{

can->Rectangle(j * getWidth(), i * getHeight(),

(j + 1) * getWidth(), (i + 1) * getHeight());

}

}

}

void fieldFigures :: newFigure()

{

empty = false;

int Num = fig->getRand(MAX_FIG);

for(int i = 0; i < 3; i++)

{

for(int j = 3; j < 6; j++)

{

if(matr[i][j] + figArr[Num][i][j - 3] <= 1) // якщо не можемо вставити фігурку

{

matr[i][j] += figArr[Num][i][j - 3];

}

else gameOver();

}

}

}

void fieldFigures :: gameOver()

{

// ShowMessage("Game Over!!!");

}

bool fieldFigures :: canMove() // блок-схема 2

{

bool res = true;

// спочатку перевіряємо нижній рядок на наявність 1

for(int j = 0; j < M; j++)

if(matr[N-1][j] == 1)

{

res = false; break;

}

if(!res) return res;

else

{

// перевіряємо весь масив на 2

for(int i = N - 2; i >= 0; i--)

{

for(int j = 0; j < M; j++)

{

if((matr[i][j] == 1) && (matr[i+1][j] == 2))

{

res = false;

break;

}

}

}

return res;

}

}

bool fieldFigures :: canMoveLeft() // блок-схема 2

{

bool res = true;

// спочатку перевіряємо 0 стовпець на наявність 1

for(int i = 0; i < N; i++)

if(matr[i][0] == 1)

{

res = false; break;

}

if(!res) return res;

else

{

// перевіряємо весь масив на 2

for(int i = N - 1; i >= 0; i--)

{

for(int j = 1; j < M; j++)

{

if((matr[i][j] == 1) && (matr[i][j-1] == 2))

{

res = false;

break;

}

}

}

return res;

}

}

bool fieldFigures :: canMoveRight() // блок-схема 2

{

bool res = true;

// спочатку перевіряємо M стовпець на наявність 1

for(int i = 0; i < N; i++)

if(matr[i][M-1] == 1)

{

res = false; break;

}

if(!res) return res;

else

{

// перевіряємо весь масив на 2

for(int i = N - 1; i >= 0; i--)

{

for(int j = 0; j < M - 1; j++)

{

if((matr[i][j] == 1) && (matr[i][j+1] == 2))

{

res = false;

break;

}

}

}

return res;

}

}
